{"version":3,"sources":["scripts/fish.js","scripts/controls.js","scripts/stats.js","scripts/fishbowl.js","index.js"],"names":["fishTypes","gupik","skalar","neonka","getRandom","min","max","Math","random","type","position","x","y","z","console","log","html","Controls","fishbowl","buttons","forEach","button","dataset","action","addEventListener","add","fish","remove","fishType","fishes","push","render","stats","index","findIndex","splice","Stats","statsContainer","querySelector","sum","reduce","obj","key","renderStats","textContent","Fishbowl","controls","document","querySelectorAll","init","length","map","join","innerHTML","updateStats","updateFishes","bowl"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["const fishTypes = {\n\tgupik: 'gupik',\n\tskalar: 'skalar',\n\tneonka: 'neonka',\n};\n\nconst getRandom = (min, max) => {\n\tif (min || max) {\n\t\treturn Math.random() * (max - min) + min;\n\t} else {\n\t\tconst num = Math.random() > 0.5 ? 1 : 0;\n\t\treturn num;\n\t}\n};\nexport default type => {\n\tconst position = {\n\t\tx: getRandom(20, 80),\n\t\ty: getRandom(25, 75),\n\t\tz: getRandom(),\n\t};\n\tconsole.log(position);\n\tswitch (type) {\n\t\tcase fishTypes.gupik:\n\t\t\treturn {\n\t\t\t\ttype: fishTypes.gupik,\n\t\t\t\thtml: `<div class=\"${'fish fish--' + fishTypes.gupik}\" style=\"left: ${\n\t\t\t\t\tposition.x\n\t\t\t\t}%; top: ${position.y}%; transform: rotateY(${180 *\n\t\t\t\t\tposition.z}deg);\"></div>`,\n\t\t\t};\n\t\tcase fishTypes.skalar:\n\t\t\treturn {\n\t\t\t\ttype: fishTypes.skalar,\n\t\t\t\thtml: `<div class=\"${'fish fish--' + fishTypes.skalar}\" style=\"left: ${\n\t\t\t\t\tposition.x\n\t\t\t\t}%; top: ${position.y}%; transform: rotateY(${180 *\n\t\t\t\t\tposition.z}deg);\"></div>`,\n\t\t\t};\n\t\tcase fishTypes.neonka:\n\t\t\treturn {\n\t\t\t\ttype: fishTypes.neonka,\n\t\t\t\thtml: `<div class=\"${'fish fish--' + fishTypes.neonka}\" style=\"left: ${\n\t\t\t\t\tposition.x\n\t\t\t\t}%; top: ${position.y}%; transform: rotateY(${180 *\n\t\t\t\t\tposition.z}deg)\"></div>`,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {};\n\t}\n};\n","import fishFunc from './fish';\n\nexport default class Controls {\n\tconstructor(fishbowl, buttons) {\n\t\tthis.fishbowl = fishbowl;\n\t\tthis.buttons = buttons;\n\t\tthis.buttons = buttons;\n\t}\n\tinit() {\n\t\tthis.buttons.forEach(button => {\n\t\t\tif (button.dataset.action === 'add') {\n\t\t\t\tbutton.addEventListener('click', () => this.add(button.dataset.fish));\n\t\t\t} else {\n\t\t\t\tbutton.addEventListener('click', () =>\n\t\t\t\t\tthis.remove(button.dataset.fish)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\tadd(fishType) {\n\t\tthis.fishbowl.fishes.push(fishFunc(fishType));\n\t\tthis.fishbowl.render();\n\t}\n\tremove(fishType) {\n\t\tif (this.fishbowl.stats[fishType]) {\n\t\t\tconst index = this.fishbowl.fishes.findIndex(\n\t\t\t\tfish => fish.type === fishType\n\t\t\t);\n\t\t\tif (index > -1) {\n\t\t\t\tthis.fishbowl.fishes.splice(index, 1);\n\t\t\t}\n\t\t\tthis.fishbowl.render();\n\t\t}\n\t}\n}\n","export default class Stats {\n\tconstructor(fishbowl, statsContainer) {\n\t\tthis.statsContainer = statsContainer;\n\t\tthis.fishbowl = fishbowl;\n\n\t\tthis.stats = {};\n\t\tthis.skalar = this.statsContainer.querySelector('[data-type=\"skalar\"]');\n\t\tthis.gupik = this.statsContainer.querySelector('[data-type=\"gupik\"]');\n\t\tthis.neonka = this.statsContainer.querySelector('[data-type=\"neonka\"]');\n\t\tthis.sum = this.statsContainer.querySelector('[data-type=\"sum\"]');\n\t}\n\tupdateStats() {\n\t\tthis.stats = this.fishbowl.fishes.reduce((obj, fish) => {\n\t\t\tif (obj[fish.type]) {\n\t\t\t\tobj[fish.type]++;\n\t\t\t} else {\n\t\t\t\tobj[fish.type] = 1;\n\t\t\t}\n\t\t\treturn obj;\n\t\t}, {});\n\t\tlet sum = 0;\n\t\tfor (let key in this.stats) {\n\t\t\tsum += this.stats[key];\n\t\t}\n\t\tthis.stats.sum = sum;\n\t\tthis.renderStats();\n\t}\n\trenderStats() {\n\t\tthis.skalar.textContent = this.stats.skalar ? this.stats.skalar : '0';\n\t\tthis.gupik.textContent = this.stats.gupik ? this.stats.gupik : '0';\n\t\tthis.neonka.textContent = this.stats.neonka ? this.stats.neonka : '0';\n\t\tthis.sum.textContent = this.stats.sum;\n\t}\n}\n","import Controls from './controls';\nimport Stats from './stats';\nexport default class Fishbowl {\n\tconstructor(fishbowl, stats) {\n\t\tthis.fishbowl = fishbowl;\n\t\tthis.controls = new Controls(\n\t\t\tthis,\n\t\t\tdocument.querySelectorAll('.controls__button')\n\t\t);\n\t\tthis.stats = new Stats(this, stats);\n\t\tthis.fishes = [];\n\t}\n\tinit() {\n\t\tthis.controls.init();\n\t}\n\tupdateFishes() {\n\t\tif (this.fishes.length > 0) {\n\t\t\tconst html = this.fishes.map(fish => fish.html).join('');\n\t\t\tthis.fishbowl.innerHTML = html;\n\t\t}\n\t}\n\n\trender() {\n\t\tthis.stats.updateStats();\n\t\tthis.updateFishes();\n\t}\n}\n","import Fishbowl from './scripts/fishbowl';\nimport './style.scss';\n\nconst bowl = document.querySelector('.aquarium__bowl');\nconst stats = document.querySelector('.stats__container');\n\nconst fishbowl = new Fishbowl(bowl, stats);\nfishbowl.init();\n"]}